syntax = "proto3";

package chat;

option go_package = "/chat";

service ChatService {
  // 创建新的会话
  rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse) {}

  // 获取用户的会话列表
    rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse) {}

  // 发送消息
  rpc SendMessage(SendMessageRequest) returns (stream SendMessageResponse) {}

  // 获取会话的消息历史
  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse) {}

  // 删除会话
  rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse) {}
}

// 会话模式枚举
enum ConversationMode {
  MODE_UNSPECIFIED = 0;
  MODE_HAPPY = 1;
  // 可添加更多模式
}

// 消息发送者类型
enum SenderType {
  SENDER_UNSPECIFIED = 0;
  SENDER_USER = 1;
  SENDER_AI = 2;
}

// 会话信息
message Conversation {
  int32 conversation_id = 1;
  int32 user_id = 2;
  string session_title = 3;
  string mode = 4;
  string updated_at = 5; // ISO 8601 格式的时间字符串，例如："2023-06-15T14:30:00Z"
  string created_at = 6;

}

// 消息信息
message Message {
  int32 message_id = 1;
  int32 conversation_id = 2;
  int32 user_id =3;
  string content = 4;
  string sender_type = 5;
  string send_time = 6; // ISO 8601 格式的时间字符串
}

// 创建会话请求
message CreateConversationRequest {
  int32 user_id = 1;
  string session_title = 2;
  string mode = 3;
}

message CreateConversationResponse {
  Conversation conversation = 1;
}

// 获取会话列表请求
message ListConversationsRequest {
  int32 user_id = 1;
  int32 page_size = 2;
  int32 page_number = 3;
}

message ListConversationsResponse {
  repeated Conversation conversations = 1;
  int32 total = 2;
}


// 发送消息请求
message SendMessageRequest {
  int32 conversation_id = 1;
  int32 user_id = 2; // 用于权限验证
  string content = 3;
  string mode =4;
}

message SendMessageResponse {
  Message message = 1;
}

// 获取消息列表请求
message ListMessagesRequest {
  int32 conversation_id = 1;
  int32 user_id = 2; // 用于权限验证
  int32 page_size = 3;
  int32 page_number = 4;
}

message ListMessagesResponse {
  repeated Message messages = 1;
  int32 total = 2;
}

// 删除会话请求
message DeleteConversationRequest {
  int32 conversation_id = 1;
  int32 user_id = 2; // 用于权限验证
}

message DeleteConversationResponse {
  bool success = 1;
}
