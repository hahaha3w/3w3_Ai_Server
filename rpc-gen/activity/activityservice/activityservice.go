// Code generated by Kitex v0.12.1. DO NOT EDIT.

package activityservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	"github.com/hahaha3w/3w3_Ai_Server/rpc-gen/activity"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetUserActivities": kitex.NewMethodInfo(
		getUserActivitiesHandler,
		newGetUserActivitiesArgs,
		newGetUserActivitiesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateUserActivity": kitex.NewMethodInfo(
		createUserActivityHandler,
		newCreateUserActivityArgs,
		newCreateUserActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	activityServiceServiceInfo                = NewServiceInfo()
	activityServiceServiceInfoForClient       = NewServiceInfoForClient()
	activityServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return activityServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return activityServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return activityServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ActivityService"
	handlerType := (*activity.ActivityService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "activity",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func getUserActivitiesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(activity.GetUserActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(activity.ActivityService).GetUserActivities(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserActivitiesArgs:
		success, err := handler.(activity.ActivityService).GetUserActivities(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserActivitiesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserActivitiesArgs() interface{} {
	return &GetUserActivitiesArgs{}
}

func newGetUserActivitiesResult() interface{} {
	return &GetUserActivitiesResult{}
}

type GetUserActivitiesArgs struct {
	Req *activity.GetUserActivityReq
}

func (p *GetUserActivitiesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(activity.GetUserActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserActivitiesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserActivitiesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserActivitiesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserActivitiesArgs) Unmarshal(in []byte) error {
	msg := new(activity.GetUserActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserActivitiesArgs_Req_DEFAULT *activity.GetUserActivityReq

func (p *GetUserActivitiesArgs) GetReq() *activity.GetUserActivityReq {
	if !p.IsSetReq() {
		return GetUserActivitiesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserActivitiesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserActivitiesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserActivitiesResult struct {
	Success *activity.GetUserActivityResp
}

var GetUserActivitiesResult_Success_DEFAULT *activity.GetUserActivityResp

func (p *GetUserActivitiesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(activity.GetUserActivityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserActivitiesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserActivitiesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserActivitiesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserActivitiesResult) Unmarshal(in []byte) error {
	msg := new(activity.GetUserActivityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserActivitiesResult) GetSuccess() *activity.GetUserActivityResp {
	if !p.IsSetSuccess() {
		return GetUserActivitiesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserActivitiesResult) SetSuccess(x interface{}) {
	p.Success = x.(*activity.GetUserActivityResp)
}

func (p *GetUserActivitiesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserActivitiesResult) GetResult() interface{} {
	return p.Success
}

func createUserActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(activity.CreateUserActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(activity.ActivityService).CreateUserActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateUserActivityArgs:
		success, err := handler.(activity.ActivityService).CreateUserActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateUserActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateUserActivityArgs() interface{} {
	return &CreateUserActivityArgs{}
}

func newCreateUserActivityResult() interface{} {
	return &CreateUserActivityResult{}
}

type CreateUserActivityArgs struct {
	Req *activity.CreateUserActivityReq
}

func (p *CreateUserActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(activity.CreateUserActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateUserActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateUserActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateUserActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateUserActivityArgs) Unmarshal(in []byte) error {
	msg := new(activity.CreateUserActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateUserActivityArgs_Req_DEFAULT *activity.CreateUserActivityReq

func (p *CreateUserActivityArgs) GetReq() *activity.CreateUserActivityReq {
	if !p.IsSetReq() {
		return CreateUserActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateUserActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateUserActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateUserActivityResult struct {
	Success *activity.CreateUserActivityResp
}

var CreateUserActivityResult_Success_DEFAULT *activity.CreateUserActivityResp

func (p *CreateUserActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(activity.CreateUserActivityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateUserActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateUserActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateUserActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateUserActivityResult) Unmarshal(in []byte) error {
	msg := new(activity.CreateUserActivityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateUserActivityResult) GetSuccess() *activity.CreateUserActivityResp {
	if !p.IsSetSuccess() {
		return CreateUserActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateUserActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*activity.CreateUserActivityResp)
}

func (p *CreateUserActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateUserActivityResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUserActivities(ctx context.Context, Req *activity.GetUserActivityReq) (r *activity.GetUserActivityResp, err error) {
	var _args GetUserActivitiesArgs
	_args.Req = Req
	var _result GetUserActivitiesResult
	if err = p.c.Call(ctx, "GetUserActivities", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUserActivity(ctx context.Context, Req *activity.CreateUserActivityReq) (r *activity.CreateUserActivityResp, err error) {
	var _args CreateUserActivityArgs
	_args.Req = Req
	var _result CreateUserActivityResult
	if err = p.c.Call(ctx, "CreateUserActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
