// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package activity

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Activity) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Activity[number], err)
}

func (x *Activity) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ActivityId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.RelationId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserActivityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserActivityReq[number], err)
}

func (x *GetUserActivityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserActivityResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserActivityResp[number], err)
}

func (x *GetUserActivityResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Activity
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Activities = append(x.Activities, &v)
	return offset, nil
}

func (x *GetUserActivityResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ChatCount, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetUserActivityResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.MemoirCount, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetUserActivityResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.UseDay, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CreateUserActivityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateUserActivityReq[number], err)
}

func (x *CreateUserActivityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateUserActivityReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.RelationId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateUserActivityReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateUserActivityReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateUserActivityResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateUserActivityResp[number], err)
}

func (x *CreateUserActivityResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Success, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CreateUserActivityResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateUserActivityResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Activity
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Activity = &v
	return offset, nil
}

func (x *Activity) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *Activity) fastWriteField1(buf []byte) (offset int) {
	if x.ActivityId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetActivityId())
	return offset
}

func (x *Activity) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *Activity) fastWriteField3(buf []byte) (offset int) {
	if x.RelationId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetRelationId())
	return offset
}

func (x *Activity) fastWriteField4(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetType())
	return offset
}

func (x *Activity) fastWriteField5(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetDescription())
	return offset
}

func (x *GetUserActivityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetUserActivityReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetUserActivityResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *GetUserActivityResp) fastWriteField1(buf []byte) (offset int) {
	if x.Activities == nil {
		return offset
	}
	for i := range x.GetActivities() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetActivities()[i])
	}
	return offset
}

func (x *GetUserActivityResp) fastWriteField2(buf []byte) (offset int) {
	if x.ChatCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetChatCount())
	return offset
}

func (x *GetUserActivityResp) fastWriteField3(buf []byte) (offset int) {
	if x.MemoirCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetMemoirCount())
	return offset
}

func (x *GetUserActivityResp) fastWriteField4(buf []byte) (offset int) {
	if x.UseDay == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetUseDay())
	return offset
}

func (x *CreateUserActivityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *CreateUserActivityReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *CreateUserActivityReq) fastWriteField2(buf []byte) (offset int) {
	if x.RelationId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetRelationId())
	return offset
}

func (x *CreateUserActivityReq) fastWriteField3(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetType())
	return offset
}

func (x *CreateUserActivityReq) fastWriteField4(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDescription())
	return offset
}

func (x *CreateUserActivityResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CreateUserActivityResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Success {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetSuccess())
	return offset
}

func (x *CreateUserActivityResp) fastWriteField2(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMessage())
	return offset
}

func (x *CreateUserActivityResp) fastWriteField3(buf []byte) (offset int) {
	if x.Activity == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetActivity())
	return offset
}

func (x *Activity) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *Activity) sizeField1() (n int) {
	if x.ActivityId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetActivityId())
	return n
}

func (x *Activity) sizeField2() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetUserId())
	return n
}

func (x *Activity) sizeField3() (n int) {
	if x.RelationId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetRelationId())
	return n
}

func (x *Activity) sizeField4() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetType())
	return n
}

func (x *Activity) sizeField5() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetDescription())
	return n
}

func (x *GetUserActivityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetUserActivityReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserId())
	return n
}

func (x *GetUserActivityResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *GetUserActivityResp) sizeField1() (n int) {
	if x.Activities == nil {
		return n
	}
	for i := range x.GetActivities() {
		n += fastpb.SizeMessage(1, x.GetActivities()[i])
	}
	return n
}

func (x *GetUserActivityResp) sizeField2() (n int) {
	if x.ChatCount == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetChatCount())
	return n
}

func (x *GetUserActivityResp) sizeField3() (n int) {
	if x.MemoirCount == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetMemoirCount())
	return n
}

func (x *GetUserActivityResp) sizeField4() (n int) {
	if x.UseDay == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetUseDay())
	return n
}

func (x *CreateUserActivityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *CreateUserActivityReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserId())
	return n
}

func (x *CreateUserActivityReq) sizeField2() (n int) {
	if x.RelationId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetRelationId())
	return n
}

func (x *CreateUserActivityReq) sizeField3() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetType())
	return n
}

func (x *CreateUserActivityReq) sizeField4() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDescription())
	return n
}

func (x *CreateUserActivityResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CreateUserActivityResp) sizeField1() (n int) {
	if !x.Success {
		return n
	}
	n += fastpb.SizeBool(1, x.GetSuccess())
	return n
}

func (x *CreateUserActivityResp) sizeField2() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMessage())
	return n
}

func (x *CreateUserActivityResp) sizeField3() (n int) {
	if x.Activity == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetActivity())
	return n
}

var fieldIDToName_Activity = map[int32]string{
	1: "ActivityId",
	2: "UserId",
	3: "RelationId",
	4: "Type",
	5: "Description",
}

var fieldIDToName_GetUserActivityReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_GetUserActivityResp = map[int32]string{
	1: "Activities",
	2: "ChatCount",
	3: "MemoirCount",
	4: "UseDay",
}

var fieldIDToName_CreateUserActivityReq = map[int32]string{
	1: "UserId",
	2: "RelationId",
	3: "Type",
	4: "Description",
}

var fieldIDToName_CreateUserActivityResp = map[int32]string{
	1: "Success",
	2: "Message",
	3: "Activity",
}
